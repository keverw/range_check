{"version":3,"file":"range-check.es5.js","sources":["../node_modules/ipaddr.js/lib/ipaddr.js","../node_modules/ip6/ip6.js","../src/range-check.ts"],"sourcesContent":["(function() {\n  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;\n\n  ipaddr = {};\n\n  root = this;\n\n  if ((typeof module !== \"undefined\" && module !== null) && module.exports) {\n    module.exports = ipaddr;\n  } else {\n    root['ipaddr'] = ipaddr;\n  }\n\n  matchCIDR = function(first, second, partSize, cidrBits) {\n    var part, shift;\n    if (first.length !== second.length) {\n      throw new Error(\"ipaddr: cannot match CIDR for objects with different lengths\");\n    }\n    part = 0;\n    while (cidrBits > 0) {\n      shift = partSize - cidrBits;\n      if (shift < 0) {\n        shift = 0;\n      }\n      if (first[part] >> shift !== second[part] >> shift) {\n        return false;\n      }\n      cidrBits -= partSize;\n      part += 1;\n    }\n    return true;\n  };\n\n  ipaddr.subnetMatch = function(address, rangeList, defaultName) {\n    var k, len, rangeName, rangeSubnets, subnet;\n    if (defaultName == null) {\n      defaultName = 'unicast';\n    }\n    for (rangeName in rangeList) {\n      rangeSubnets = rangeList[rangeName];\n      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n        rangeSubnets = [rangeSubnets];\n      }\n      for (k = 0, len = rangeSubnets.length; k < len; k++) {\n        subnet = rangeSubnets[k];\n        if (address.kind() === subnet[0].kind()) {\n          if (address.match.apply(address, subnet)) {\n            return rangeName;\n          }\n        }\n      }\n    }\n    return defaultName;\n  };\n\n  ipaddr.IPv4 = (function() {\n    function IPv4(octets) {\n      var k, len, octet;\n      if (octets.length !== 4) {\n        throw new Error(\"ipaddr: ipv4 octet count should be 4\");\n      }\n      for (k = 0, len = octets.length; k < len; k++) {\n        octet = octets[k];\n        if (!((0 <= octet && octet <= 255))) {\n          throw new Error(\"ipaddr: ipv4 octet should fit in 8 bits\");\n        }\n      }\n      this.octets = octets;\n    }\n\n    IPv4.prototype.kind = function() {\n      return 'ipv4';\n    };\n\n    IPv4.prototype.toString = function() {\n      return this.octets.join(\".\");\n    };\n\n    IPv4.prototype.toNormalizedString = function() {\n      return this.toString();\n    };\n\n    IPv4.prototype.toByteArray = function() {\n      return this.octets.slice(0);\n    };\n\n    IPv4.prototype.match = function(other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv4') {\n        throw new Error(\"ipaddr: cannot match ipv4 address with non-ipv4 one\");\n      }\n      return matchCIDR(this.octets, other.octets, 8, cidrRange);\n    };\n\n    IPv4.prototype.SpecialRanges = {\n      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n      multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n      loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n      \"private\": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],\n      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]\n    };\n\n    IPv4.prototype.range = function() {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv4.prototype.toIPv4MappedAddress = function() {\n      return ipaddr.IPv6.parse(\"::ffff:\" + (this.toString()));\n    };\n\n    IPv4.prototype.prefixLengthFromSubnetMask = function() {\n      var cidr, i, k, octet, stop, zeros, zerotable;\n      zerotable = {\n        0: 8,\n        128: 7,\n        192: 6,\n        224: 5,\n        240: 4,\n        248: 3,\n        252: 2,\n        254: 1,\n        255: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 3; k >= 0; i = k += -1) {\n        octet = this.octets[i];\n        if (octet in zerotable) {\n          zeros = zerotable[octet];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 8) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 32 - cidr;\n    };\n\n    return IPv4;\n\n  })();\n\n  ipv4Part = \"(0?\\\\d+|0x[a-f0-9]+)\";\n\n  ipv4Regexes = {\n    fourOctet: new RegExp(\"^\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"$\", 'i'),\n    longValue: new RegExp(\"^\" + ipv4Part + \"$\", 'i')\n  };\n\n  ipaddr.IPv4.parser = function(string) {\n    var match, parseIntAuto, part, shift, value;\n    parseIntAuto = function(string) {\n      if (string[0] === \"0\" && string[1] !== \"x\") {\n        return parseInt(string, 8);\n      } else {\n        return parseInt(string);\n      }\n    };\n    if (match = string.match(ipv4Regexes.fourOctet)) {\n      return (function() {\n        var k, len, ref, results;\n        ref = match.slice(1, 6);\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(parseIntAuto(part));\n        }\n        return results;\n      })();\n    } else if (match = string.match(ipv4Regexes.longValue)) {\n      value = parseIntAuto(match[1]);\n      if (value > 0xffffffff || value < 0) {\n        throw new Error(\"ipaddr: address outside defined range\");\n      }\n      return ((function() {\n        var k, results;\n        results = [];\n        for (shift = k = 0; k <= 24; shift = k += 8) {\n          results.push((value >> shift) & 0xff);\n        }\n        return results;\n      })()).reverse();\n    } else {\n      return null;\n    }\n  };\n\n  ipaddr.IPv6 = (function() {\n    function IPv6(parts, zoneId) {\n      var i, k, l, len, part, ref;\n      if (parts.length === 16) {\n        this.parts = [];\n        for (i = k = 0; k <= 14; i = k += 2) {\n          this.parts.push((parts[i] << 8) | parts[i + 1]);\n        }\n      } else if (parts.length === 8) {\n        this.parts = parts;\n      } else {\n        throw new Error(\"ipaddr: ipv6 part count should be 8 or 16\");\n      }\n      ref = this.parts;\n      for (l = 0, len = ref.length; l < len; l++) {\n        part = ref[l];\n        if (!((0 <= part && part <= 0xffff))) {\n          throw new Error(\"ipaddr: ipv6 part should fit in 16 bits\");\n        }\n      }\n      if (zoneId) {\n        this.zoneId = zoneId;\n      }\n    }\n\n    IPv6.prototype.kind = function() {\n      return 'ipv6';\n    };\n\n    IPv6.prototype.toString = function() {\n      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n    };\n\n    IPv6.prototype.toRFC5952String = function() {\n      var bestMatchIndex, bestMatchLength, match, regex, string;\n      regex = /((^|:)(0(:|$)){2,})/g;\n      string = this.toNormalizedString();\n      bestMatchIndex = 0;\n      bestMatchLength = -1;\n      while ((match = regex.exec(string))) {\n        if (match[0].length > bestMatchLength) {\n          bestMatchIndex = match.index;\n          bestMatchLength = match[0].length;\n        }\n      }\n      if (bestMatchLength < 0) {\n        return string;\n      }\n      return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);\n    };\n\n    IPv6.prototype.toByteArray = function() {\n      var bytes, k, len, part, ref;\n      bytes = [];\n      ref = this.parts;\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        bytes.push(part >> 8);\n        bytes.push(part & 0xff);\n      }\n      return bytes;\n    };\n\n    IPv6.prototype.toNormalizedString = function() {\n      var addr, part, suffix;\n      addr = ((function() {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16));\n        }\n        return results;\n      }).call(this)).join(\":\");\n      suffix = '';\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n      return addr + suffix;\n    };\n\n    IPv6.prototype.toFixedLengthString = function() {\n      var addr, part, suffix;\n      addr = ((function() {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16).padStart(4, '0'));\n        }\n        return results;\n      }).call(this)).join(\":\");\n      suffix = '';\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n      return addr + suffix;\n    };\n\n    IPv6.prototype.match = function(other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv6') {\n        throw new Error(\"ipaddr: cannot match ipv6 address with non-ipv6 one\");\n      }\n      return matchCIDR(this.parts, other.parts, 16, cidrRange);\n    };\n\n    IPv6.prototype.SpecialRanges = {\n      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n    };\n\n    IPv6.prototype.range = function() {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv6.prototype.isIPv4MappedAddress = function() {\n      return this.range() === 'ipv4Mapped';\n    };\n\n    IPv6.prototype.toIPv4Address = function() {\n      var high, low, ref;\n      if (!this.isIPv4MappedAddress()) {\n        throw new Error(\"ipaddr: trying to convert a generic ipv6 address to ipv4\");\n      }\n      ref = this.parts.slice(-2), high = ref[0], low = ref[1];\n      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n    };\n\n    IPv6.prototype.prefixLengthFromSubnetMask = function() {\n      var cidr, i, k, part, stop, zeros, zerotable;\n      zerotable = {\n        0: 16,\n        32768: 15,\n        49152: 14,\n        57344: 13,\n        61440: 12,\n        63488: 11,\n        64512: 10,\n        65024: 9,\n        65280: 8,\n        65408: 7,\n        65472: 6,\n        65504: 5,\n        65520: 4,\n        65528: 3,\n        65532: 2,\n        65534: 1,\n        65535: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 7; k >= 0; i = k += -1) {\n        part = this.parts[i];\n        if (part in zerotable) {\n          zeros = zerotable[part];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 16) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 128 - cidr;\n    };\n\n    return IPv6;\n\n  })();\n\n  ipv6Part = \"(?:[0-9a-f]+::?)+\";\n\n  zoneIndex = \"%[0-9a-z]{1,}\";\n\n  ipv6Regexes = {\n    zoneIndex: new RegExp(zoneIndex, 'i'),\n    \"native\": new RegExp(\"^(::)?(\" + ipv6Part + \")?([0-9a-f]+)?(::)?(\" + zoneIndex + \")?$\", 'i'),\n    transitional: new RegExp((\"^((?:\" + ipv6Part + \")|(?:::)(?:\" + ipv6Part + \")?)\") + (ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part) + (\"(\" + zoneIndex + \")?$\"), 'i')\n  };\n\n  expandIPv6 = function(string, parts) {\n    var colonCount, lastColon, part, replacement, replacementCount, zoneId;\n    if (string.indexOf('::') !== string.lastIndexOf('::')) {\n      return null;\n    }\n    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];\n    if (zoneId) {\n      zoneId = zoneId.substring(1);\n      string = string.replace(/%.+$/, '');\n    }\n    colonCount = 0;\n    lastColon = -1;\n    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n      colonCount++;\n    }\n    if (string.substr(0, 2) === '::') {\n      colonCount--;\n    }\n    if (string.substr(-2, 2) === '::') {\n      colonCount--;\n    }\n    if (colonCount > parts) {\n      return null;\n    }\n    replacementCount = parts - colonCount;\n    replacement = ':';\n    while (replacementCount--) {\n      replacement += '0:';\n    }\n    string = string.replace('::', replacement);\n    if (string[0] === ':') {\n      string = string.slice(1);\n    }\n    if (string[string.length - 1] === ':') {\n      string = string.slice(0, -1);\n    }\n    parts = (function() {\n      var k, len, ref, results;\n      ref = string.split(\":\");\n      results = [];\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        results.push(parseInt(part, 16));\n      }\n      return results;\n    })();\n    return {\n      parts: parts,\n      zoneId: zoneId\n    };\n  };\n\n  ipaddr.IPv6.parser = function(string) {\n    var addr, k, len, match, octet, octets, zoneId;\n    if (ipv6Regexes['native'].test(string)) {\n      return expandIPv6(string, 8);\n    } else if (match = string.match(ipv6Regexes['transitional'])) {\n      zoneId = match[6] || '';\n      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n      if (addr.parts) {\n        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];\n        for (k = 0, len = octets.length; k < len; k++) {\n          octet = octets[k];\n          if (!((0 <= octet && octet <= 255))) {\n            return null;\n          }\n        }\n        addr.parts.push(octets[0] << 8 | octets[1]);\n        addr.parts.push(octets[2] << 8 | octets[3]);\n        return {\n          parts: addr.parts,\n          zoneId: addr.zoneId\n        };\n      }\n    }\n    return null;\n  };\n\n  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {\n    return this.parser(string) !== null;\n  };\n\n  ipaddr.IPv4.isValid = function(string) {\n    var e;\n    try {\n      new this(this.parser(string));\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.isValidFourPartDecimal = function(string) {\n    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ipaddr.IPv6.isValid = function(string) {\n    var addr, e;\n    if (typeof string === \"string\" && string.indexOf(\":\") === -1) {\n      return false;\n    }\n    try {\n      addr = this.parser(string);\n      new this(addr.parts, addr.zoneId);\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.parse = function(string) {\n    var parts;\n    parts = this.parser(string);\n    if (parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(parts);\n  };\n\n  ipaddr.IPv6.parse = function(string) {\n    var addr;\n    addr = this.parser(string);\n    if (addr.parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(addr.parts, addr.zoneId);\n  };\n\n  ipaddr.IPv4.parseCIDR = function(string) {\n    var maskLength, match, parsed;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 32) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function() {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv4 CIDR range\");\n  };\n\n  ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {\n    var filledOctetCount, j, octets;\n    prefix = parseInt(prefix);\n    if (prefix < 0 || prefix > 32) {\n      throw new Error('ipaddr: invalid IPv4 prefix length');\n    }\n    octets = [0, 0, 0, 0];\n    j = 0;\n    filledOctetCount = Math.floor(prefix / 8);\n    while (j < filledOctetCount) {\n      octets[j] = 255;\n      j++;\n    }\n    if (filledOctetCount < 4) {\n      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n    }\n    return new this(octets);\n  };\n\n  ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv4.networkAddressFromCIDR = function(string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv6.parseCIDR = function(string) {\n    var maskLength, match, parsed;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 128) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function() {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv6 CIDR range\");\n  };\n\n  ipaddr.isValid = function(string) {\n    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n  };\n\n  ipaddr.parse = function(string) {\n    if (ipaddr.IPv6.isValid(string)) {\n      return ipaddr.IPv6.parse(string);\n    } else if (ipaddr.IPv4.isValid(string)) {\n      return ipaddr.IPv4.parse(string);\n    } else {\n      throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 format\");\n    }\n  };\n\n  ipaddr.parseCIDR = function(string) {\n    var e;\n    try {\n      return ipaddr.IPv6.parseCIDR(string);\n    } catch (error1) {\n      e = error1;\n      try {\n        return ipaddr.IPv4.parseCIDR(string);\n      } catch (error1) {\n        e = error1;\n        throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 CIDR format\");\n      }\n    }\n  };\n\n  ipaddr.fromByteArray = function(bytes) {\n    var length;\n    length = bytes.length;\n    if (length === 4) {\n      return new ipaddr.IPv4(bytes);\n    } else if (length === 16) {\n      return new ipaddr.IPv6(bytes);\n    } else {\n      throw new Error(\"ipaddr: the binary input is neither an IPv6 nor IPv4 address\");\n    }\n  };\n\n  ipaddr.process = function(string) {\n    var addr;\n    addr = this.parse(string);\n    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n      return addr.toIPv4Address();\n    } else {\n      return addr;\n    }\n  };\n\n}).call(this);\n","/**\n * Created by elgs on 3/5/16.\n */\nconst normalize = function (a) {\n   if (!_validate(a)) {\n      throw new Error('Invalid address: ' + a);\n   }\n   a = a.toLowerCase()\n\n   const nh = a.split(/\\:\\:/g);\n   if (nh.length > 2) {\n      throw new Error('Invalid address: ' + a);\n   }\n\n   let sections = [];\n   if (nh.length == 1) {\n      // full mode\n      sections = a.split(/\\:/g);\n      if (sections.length !== 8) {\n         throw new Error('Invalid address: ' + a);\n      }\n   } else if (nh.length == 2) {\n      // compact mode\n      const n = nh[0];\n      const h = nh[1];\n      const ns = n.split(/\\:/g);\n      const hs = h.split(/\\:/g);\n      for (let i in ns) {\n         sections[i] = ns[i];\n      }\n      for (let i = hs.length; i > 0; --i) {\n         sections[7 - (hs.length - i)] = hs[i - 1];\n      }\n   }\n   for (let i = 0; i < 8; ++i) {\n      if (sections[i] === undefined) {\n         sections[i] = '0000';\n      }\n      sections[i] = _leftPad(sections[i], '0', 4);\n   }\n   return sections.join(':');\n};\n\nconst abbreviate = function (a) {\n   if (!_validate(a)) {\n      throw new Error('Invalid address: ' + a);\n   }\n   a = normalize(a);\n   a = a.replace(/0000/g, 'g');\n   a = a.replace(/\\:000/g, ':');\n   a = a.replace(/\\:00/g, ':');\n   a = a.replace(/\\:0/g, ':');\n   a = a.replace(/g/g, '0');\n   const sections = a.split(/\\:/g);\n   let zPreviousFlag = false;\n   let zeroStartIndex = -1;\n   let zeroLength = 0;\n   let zStartIndex = -1;\n   let zLength = 0;\n   for (let i = 0; i < 8; ++i) {\n      const section = sections[i];\n      let zFlag = (section === '0');\n      if (zFlag && !zPreviousFlag) {\n         zStartIndex = i;\n      }\n      if (!zFlag && zPreviousFlag) {\n         zLength = i - zStartIndex;\n      }\n      if (zLength > 1 && zLength > zeroLength) {\n         zeroStartIndex = zStartIndex;\n         zeroLength = zLength;\n      }\n      zPreviousFlag = (section === '0');\n   }\n   if (zPreviousFlag) {\n      zLength = 8 - zStartIndex;\n   }\n   if (zLength > 1 && zLength > zeroLength) {\n      zeroStartIndex = zStartIndex;\n      zeroLength = zLength;\n   }\n   //console.log(zeroStartIndex, zeroLength);\n   //console.log(sections);\n   if (zeroStartIndex >= 0 && zeroLength > 1) {\n      sections.splice(zeroStartIndex, zeroLength, 'g');\n   }\n   //console.log(sections);\n   a = sections.join(':');\n   //console.log(a);\n   a = a.replace(/\\:g\\:/g, '::');\n   a = a.replace(/\\:g/g, '::');\n   a = a.replace(/g\\:/g, '::');\n   a = a.replace(/g/g, '::');\n   //console.log(a);\n   return a;\n};\n\n// Basic validation\nconst _validate = function (a) {\n   return /^[a-f0-9\\\\:]+$/ig.test(a);\n};\n\nconst _leftPad = function (d, p, n) {\n   const padding = p.repeat(n);\n   if (d.length < padding.length) {\n      d = padding.substring(0, padding.length - d.length) + d;\n   }\n   return d;\n};\n\nconst _hex2bin = function (hex) {\n   return parseInt(hex, 16).toString(2)\n};\nconst _bin2hex = function (bin) {\n   return parseInt(bin, 2).toString(16)\n};\n\nconst _addr2bin = function (addr) {\n   const nAddr = normalize(addr);\n   const sections = nAddr.split(\":\");\n   let binAddr = '';\n   for (const section of sections) {\n      binAddr += _leftPad(_hex2bin(section), '0', 16);\n   }\n   return binAddr;\n};\n\nconst _bin2addr = function (bin) {\n   const addr = [];\n   for (let i = 0; i < 8; ++i) {\n      const binPart = bin.substr(i * 16, 16);\n      const hexSection = _leftPad(_bin2hex(binPart), '0', 4);\n      addr.push(hexSection);\n   }\n   return addr.join(':');\n};\n\nconst divideSubnet = function (addr, mask0, mask1, limit, abbr) {\n   if (!_validate(addr)) {\n      throw new Error('Invalid address: ' + addr);\n   }\n   mask0 *= 1;\n   mask1 *= 1;\n   limit *= 1;\n   mask1 = mask1 || 128;\n   if (mask0 < 1 || mask1 < 1 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n      throw new Error('Invalid masks.');\n   }\n   const ret = [];\n   const binAddr = _addr2bin(addr);\n   const binNetPart = binAddr.substr(0, mask0);\n   const binHostPart = '0'.repeat(128 - mask1);\n   const numSubnets = Math.pow(2, mask1 - mask0);\n   for (let i = 0; i < numSubnets; ++i) {\n      if (!!limit && i >= limit) {\n         break;\n      }\n      const binSubnet = _leftPad(i.toString(2), '0', mask1 - mask0);\n      const binSubAddr = binNetPart + binSubnet + binHostPart;\n      const hexAddr = _bin2addr(binSubAddr);\n      if (!!abbr) {\n         ret.push(abbreviate(hexAddr));\n      } else {\n         ret.push(hexAddr);\n      }\n\n   }\n   // console.log(numSubnets);\n   // console.log(binNetPart, binSubnetPart, binHostPart);\n   // console.log(binNetPart.length, binSubnetPart.length, binHostPart.length);\n   // console.log(ret.length);\n   return ret;\n};\n\nconst range = function (addr, mask0, mask1, abbr) {\n   if (!_validate(addr)) {\n      throw new Error('Invalid address: ' + addr);\n   }\n   mask0 *= 1;\n   mask1 *= 1;\n   mask1 = mask1 || 128;\n   if (mask0 < 1 || mask1 < 1 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n      throw new Error('Invalid masks.');\n   }\n   const binAddr = _addr2bin(addr);\n   const binNetPart = binAddr.substr(0, mask0);\n   const binHostPart = '0'.repeat(128 - mask1);\n   const binStartAddr = binNetPart + '0'.repeat(mask1 - mask0) + binHostPart;\n   const binEndAddr = binNetPart + '1'.repeat(mask1 - mask0) + binHostPart;\n   if (!!abbr) {\n      return {\n         start: abbreviate(_bin2addr(binStartAddr)),\n         end: abbreviate(_bin2addr(binEndAddr)),\n         size: Math.pow(2, mask1 - mask0)\n      };\n   } else {\n      return {\n         start: _bin2addr(binStartAddr),\n         end: _bin2addr(binEndAddr),\n         size: Math.pow(2, mask1 - mask0)\n      };\n   }\n};\n\nconst randomSubnet = function (addr, mask0, mask1, limit, abbr) {\n   if (!_validate(addr)) {\n      throw new Error('Invalid address: ' + addr);\n   }\n   mask0 *= 1;\n   mask1 *= 1;\n   limit *= 1;\n   mask1 = mask1 || 128;\n   limit = limit || 1;\n   if (mask0 < 1 || mask1 < 1 || mask0 > 128 || mask1 > 128 || mask0 > mask1) {\n      throw new Error('Invalid masks.');\n   }\n   const ret = [];\n   const binAddr = _addr2bin(addr);\n   const binNetPart = binAddr.substr(0, mask0);\n   const binHostPart = '0'.repeat(128 - mask1);\n   const numSubnets = Math.pow(2, mask1 - mask0);\n   for (let i = 0; i < numSubnets && i < limit; ++i) {\n      // generate an binary string with length of mask1 - mask0\n      let binSubnet = '';\n      for (let j = 0; j < mask1 - mask0; ++j) {\n         binSubnet += Math.floor(Math.random() * 2);\n      }\n      const binSubAddr = binNetPart + binSubnet + binHostPart;\n      const hexAddr = _bin2addr(binSubAddr);\n      if (!!abbr) {\n         ret.push(abbreviate(hexAddr));\n      } else {\n         ret.push(hexAddr);\n      }\n   }\n   // console.log(numSubnets);\n   // console.log(binNetPart, binSubnetPart, binHostPart);\n   // console.log(binNetPart.length, binSubnetPart.length, binHostPart.length);\n   // console.log(ret.length);\n   return ret;\n};\n\nconst ptr = function (addr, mask) {\n   if (!_validate(addr)) {\n      throw new Error('Invalid address: ' + addr);\n   }\n   mask *= 1;\n   if (mask < 1 || mask > 128 || Math.floor(mask / 4) != mask / 4) {\n      throw new Error('Invalid masks.');\n   }\n   const fullAddr = normalize(addr);\n   const reverse = fullAddr.replace(/:/g, '').split('').reverse();\n   return reverse.slice(0, (128 - mask) / 4).join('.');\n};\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n   exports.normalize = normalize;\n   exports.abbreviate = abbreviate;\n   exports.divideSubnet = divideSubnet;\n   exports.range = range;\n   exports.randomSubnet = randomSubnet;\n   exports.ptr = ptr;\n} else {\n   window.normalize = normalize;\n   window.abbreviate = abbreviate;\n   window.divideSubnet = divideSubnet;\n   window.range = range;\n   window.randomSubnet = randomSubnet;\n   window.ptr = ptr;\n}\n","import ipaddr from 'ipaddr.js';\n// @ts-ignore: Can't find a @types/ip6 package\nimport ip6 from 'ip6';\n\nexport function isIP(addr: string) {\n  return ipaddr.isValid(addr);\n}\n\nexport function version(addr: string): number {\n  try {\n    const parse_addr = ipaddr.parse(addr);\n    const kind = parse_addr.kind();\n\n    if (kind === 'ipv4') {\n      return 4; //IPv4\n    } else if (kind === 'ipv6') {\n      return 6; //IPv6\n    } else {\n      /* istanbul ignore next */\n      return 0; //not 4 or 6\n    }\n  } catch (err) {\n    return 0; //not 4 or 6\n  }\n}\n\nexport function isV4(addr: string) {\n  return version(addr) === 4;\n}\n\nexport function isV6(addr: string) {\n  return version(addr) === 6;\n}\n\nexport function isRange(range: string) {\n  try {\n    const cidr = ipaddr.parseCIDR(range);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport function inRange(addr: string, range: string | string[]) {\n  if (typeof range === 'string') {\n    if (range.indexOf('/') !== -1) {\n      try {\n        const range_data = range.split('/');\n\n        const parse_addr = ipaddr.parse(addr);\n        const parse_range = ipaddr.parse(range_data[0]);\n\n        //@ts-ignore:  It works.\n        return parse_addr.match(parse_range, range_data[1]);\n      } catch (err) {\n        return false;\n      }\n    } else {\n      addr = isV6(addr) ? ip6.normalize(addr) : addr; //v6 normalize addr\n      range = isV6(range) ? ip6.normalize(range) : range; //v6 normalize range\n\n      return isIP(range as string) && addr === range;\n    }\n  } else if (range && typeof range === 'object') {\n    //list\n    for (const check_range in range) {\n      if (inRange(addr, range[check_range]) === true) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return false;\n  }\n}\n\nexport function storeIP(addr: string) {\n  try {\n    var parse_addr = ipaddr.parse(addr);\n    var kind = parse_addr.kind();\n\n    if (kind === 'ipv4') {\n      //is a plain v4 address\n      return addr;\n    } else if (kind === 'ipv6') {\n      //@ts-ignore:  it exists!\n      if (parse_addr.isIPv4MappedAddress()) {\n        //convert v4 mapped to v6 addresses to a v4 in it's original format\n        //@ts-ignore:  it exists!\n        return parse_addr.toIPv4Address().toString();\n      } //is a v6, abbreviate it\n      else {\n        return ip6.abbreviate(addr);\n      }\n    } else {\n      return null; //invalid IP address\n    }\n  } catch (err) {\n    return null; //invalid IP address\n  }\n}\n\n// searchIP is a aliases of storeIP\nexport { storeIP as searchIP };\n\nexport function displayIP(addr: string) {\n  try {\n    var parse_addr = ipaddr.parse(addr);\n    var kind = parse_addr.kind();\n\n    if (kind === 'ipv4') {\n      //is a plain v4 address\n      return addr;\n    } else if (kind === 'ipv6') {\n      //@ts-ignore:  it exists!\n      if (parse_addr.isIPv4MappedAddress()) {\n        //convert v4 mapped to v6 addresses to a v4 in it's original format\n        //@ts-ignore:  it exists!\n        return parse_addr.toIPv4Address().toString();\n      } //is a v6, normalize it\n      else {\n        return ip6.normalize(addr);\n      }\n    } else {\n      return ''; //invalid IP address\n    }\n  } catch (err) {\n    return ''; //invalid IP address\n  }\n}\n"],"names":["this"],"mappings":"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"}